# scripts/utils/labels.py
import re
from typing import Optional, List, Dict, Tuple, Any

# ==== Регэкспы ====
OKPD_RE        = re.compile(r'(?<![\d,])(\d{2}(?:\.\d{1,2}){1,3}(?:\.\d{3})?)(?![\d,])')
OKPD_RE_STRICT = re.compile(r'(?<![\d,])(\d{2}(?:\.\d{2}){1,2}\.\d{1,2}(?:\.\d{3})?)(?![\d,])')
OKPD_INLINE_RE = re.compile(r'(?i)\bОКПД2?\s*[:#=\-]?\s*([0-9]{2}(?:\.[0-9]{1,2}){1,3}(?:\.\d{3})?)')

GOST_RE        = re.compile(r'(?i)\bГОСТ(?:\s*(Р))?\s*(?:ИСО\s*)?([0-9]+(?:\.[0-9]+)*)\s*(?:[-–—]\s*(\d{2,4}))?\b')
GOST_SHORT_RE  = re.compile(r'ГОСТ(?:\s*Р)?\s*(?:ИСО\s*)?([0-9]{3,5})', re.I)
OST_RE         = re.compile(r'(?i)\bОСТ\b\s*([A-ZА-Я0-9][\w\.\-\s]*)')
TU_RE          = re.compile(r'(?i)(?<!\w)ТУ[-\s]*([A-ZА-Я0-9][\w\.\-]*)')
DIN_RE         = re.compile(r'(?i)\bDIN\b\s*([0-9]+)')
ISO_RE         = re.compile(r'(?i)\bISO\b\s*([0-9]+(?:[-\.]\d+)?)')

STEEL_GRADE_RE = re.compile(r'(?i)\bст\.?\s*([0-9]{1,2}[а-я]*(?:-[0-9])?)\b')
DIAMETER_RE = re.compile(
    r'(?i)(?:^|[^\d])(Ø|D|DN|Du|dn|ДУ|Ду|d)?\s*[-–—]?\s*(\d{1,3}(?:[.,]\d{1,2})?)\s*(?:мм|mm)?\b'
)

def extract_features(text: str) -> Dict[str, str]:
    """Извлечение характеристик из текста"""
    feats = {}
    if (m := STEEL_GRADE_RE.search(text or '')):
        feats['steel_grade'] = m.group(1)
    if (m := DIAMETER_RE.search(text or '')):
        feats['diameter'] = m.group(2).replace(',', '.')  # группа 2 — само число
    return feats

def okpd_canon(code: Optional[str]) -> Optional[str]:
    """Канонизация ОКПД кода"""
    if not code:
        return None
    parts = code.split('.')
    if not parts: 
        return None
    for i in range(1, len(parts)):
        is_last = (i == len(parts)-1)
        if is_last:
            if len(parts[i]) in (1,2,3):
                continue
        parts[i] = parts[i].zfill(2)
    parts[0] = parts[0].zfill(2)
    return '.'.join(parts)

def okpd_findall(s: str) -> List[str]:
    """Поиск всех ОКПД кодов в тексте"""
    txt = (s or '').replace(' ', '')
    out: List[str] = []
    for m in OKPD_RE_STRICT.finditer(txt):
        start = m.start(1)
        ctx = txt[max(0, start-8):start].upper()
        if 'ГОСТ' in ctx:
            continue
        out.append(m.group(1))
    return out

def okpd_norm(s: str) -> Optional[str]:
    """Нормализация ОКПД кода"""
    # приоритет явному "ОКПД/ОКПД2: ..."
    mi = OKPD_INLINE_RE.search(s or '')
    if mi:
        return okpd_canon(mi.group(1))
    m = OKPD_RE.search((s or '').replace(' ', ''))
    return okpd_canon(m.group(1)) if m else None

def okpd_breadcrumb(code: str) -> List[str]:
    """Построение иерархии ОКПД кода"""
    c = okpd_canon(code) or ''
    parts = c.split('.') if c else []
    return ['.'.join(parts[:i]) for i in range(1, len(parts) + 1)]

def gost_norm(raw: str) -> Optional[str]:
    """Нормализация ГОСТ"""
    if not raw:
        return None
    txt = raw.replace('–', '-').replace('—', '-')
    m = GOST_RE.search(txt)
    if not m:
        return None
    r_flag, base, year = m.group(1), m.group(2), m.group(3)
    prefix = 'ГОСТ Р' if r_flag else 'ГОСТ'
    return f"{prefix} {base}-{year}" if year else f"{prefix} {base}"

def gost_breadcrumb(code: str) -> List[str]:
    if not code: return []
    body = code.split(' ',1)[1] if ' ' in code else code
    body = re.sub(r'^\s*Р\s+', '', body, flags=re.I)  # ГОСТ Р → убрать "Р "
    base = body.split('-')[0]
    parts = base.split('.')
    crumbs = ['.'.join(parts[:i]) for i in range(1, len(parts)+1)]
    if '-' in body: crumbs.append(body)
    return crumbs

def extract_okpd_labels(text: str) -> List[Dict]:
    """Извлечение ОКПД меток из текста"""
    mi = OKPD_INLINE_RE.findall(text or '')
    codes = [okpd_canon(x) for x in mi] if mi else okpd_findall(text or '')
    seen, out = set(), []
    for c in codes:
        if not c or c in seen:
            continue
        seen.add(c)
        out.append({'ns': 'okpd', 'code': c, 'path': okpd_breadcrumb(c), 'conf': 0.8})
    return out

# --- РАСШИРЕННЫЙ КЛАССИФИКАТОР ДЛЯ ТЕХНОЛОГИЧНОГО ЗАВОДА ---

# Маппинг ГОСТ -> ОКПД2
GOST2OKPD = {
    # ДВП
    '4598':  '16.21.14.000',  # плиты древесноволокнистые 

    # ПЛАСТМАССЫ/ЛАМИНАТЫ (гетинакс листовой)
    '2718':  '22.21.30.110',  # лист из пластмассы 

    # ГАЗЫ
    '10157': '20.11.11',      # Аргон: уточняйте .121 (газ) или .122 (жидк.)
    '8050':  '20.11.12.110',  # Диоксид углерода (углекислый газ)

    # БУМАГА/КАРТОН (уточнённые листы)
    '9569':  '17.12.14.172',  # бумага конденсаторная (семейство 17.12.14.170)
    '8273':  '17.12.14.190',  # бумага обёрточная
    '597':   '17.12.14.120',  # бумага чертежная
    '12026': '17.12.14.140',  # бумага фильтровальная (техническая)
    '2824':  '17.12.14.179',  # картон электроизоляционный (прочая)

    # КРАСКИ/ГРУНТОВКИ 
    '6465': '20.30.12', # ГФ-021 и др. алкидные грунты 
    '9109': '20.30.12', # ФЛ-ОЗК 
    '12707': '20.30.12', # ВЛ-02 
    '25718': '20.30.12', # АК-070 

    # ХИМИЯ (кислоты, вода, аммиак, соли)
    '4204':  '20.13.24.122',  # кислота серная (реакт. / тех.) 
    '2184':  '20.13.24.122',  # кислота серная техническая (тот же класс)
    '3118':  '20.13.24.112',  # кислота соляная
    '701':   '20.15.10.110',  # кислота азотная
    '6709':  '20.13.52.120',  # вода дистиллированная
    '58144': '20.13.52.120',  # ГОСТ Р 58144-2018 — вода для лабораторных целей
    '6221':  '20.15.10.120',  # аммиак безводный
    '20490': '20.13.51.113',  # перманганат калия (манганаты/перманганаты)
    '2210':  '20.15.20.110',  # хлорид аммония
    '2567':  '20.13.24.141',  # кислота фтористоводородная (плавиковая)

    # Растворители и масла/смазки
    '2768':  '20.14.62.000',  # ацетон технический
    '2603':  '20.14.62.000',  # ацетон (реактив)
    '8981':  '20.14.32.123',  # этилацетат (эфир уксусной кислоты)
    '9433':  '19.20.29.210',  # смазка пластичная (ЦИАТИМ-221)

    # Бумага/картон
    '7376':  '17.21.11.110',  # картон гофрированный (в рулонах/листах)

    # Сосновая канифоль
    '19113': '20.14.71.171',  # канифоль и кислоты смоляные

    # Щётки/кисти
    '10597': '32.91.12.110',  # кисти малярные

    # Коаксиальные кабели — частные стандарты серии 11326.* 
    '11326': '27.32.12.000',  
    '11326.3':  '27.32.12.000',
    '11326.37': '27.32.12.000',
    '11326.74': '27.32.12.000',
 
    '9546': '20.13.31.000',  # аммоний фтористый кислый (основной)
    # alt: '20.13.62.190'  # fallback «прочие неорганические химикаты»

    # === КРЕПЁЖ ISO (ГОСТ Р ИСО / ГОСТ ISO) ===
    '4014': '25.94.11.110',  # болты шестигранные (частичная резьба) ГОСТ Р ИСО 
    '4017': '25.94.11.110',  # винты (шестигр., полная резьба) ГОСТ Р ИСО 
    '4032': '25.94.11.130',  # гайки шестигранные, тип 1 ГОСТ Р ИСО 
    '8765': '25.94.11.110',  # болты шестигранные (мелкая/спец. резьба) ГОСТ Р ИСО 
    '2009': '25.94.11.120',  # винты с полукруглой/потайной (шлиц) ГОСТ Р ИСО 
    '1207': '25.94.11.120',  # винты с цилиндрической головкой (шлиц) ГОСТ Р ИСО 
    '7805':  '25.94.11.110',  # болты с шестигранной головкой
    '7798':  '25.94.11.110',  # болты с шестигранной головкой, класс А
    '7796':  '25.94.11.110',  # болты с полукруглой головкой
    '7808':  '25.94.11.110',  # болты с квадратной головкой
    '15589': '25.94.11.110',  # болты с шестигранной головкой, класс В
    '15590': '25.94.11.110',  # болты с увеличенной головкой
    '2010':  '25.94.11.120',  # ГОСТ Р ИСО 2010 — винты с полупотайной головкой (винты) 
    '3032':  '25.94.11.130',  # гайки шестигранные низкие
    '3057':  '25.94.12.144',  # пружины тарельчатые
    '6958':  '25.94.12.110',  # шайбы (серии по 6958-78 — как плоские/увеличенные)
    '17020': '25.72.14.190',  # прижимы/хомуты/держатели для труб и кабелей
    '22375': '27.33.13',      # лепестки/наконечники паячные (клеммы, контакты)

    '4018':  '25.94.11.120',  # винты с шестигранной головкой (ISO)
    '17473': '25.94.11.120',  # винты с полукруглой головкой
    '17475': '25.94.11.120',  # винты с потайной головкой
    '1491':  '25.94.11.120',  # винты с цилиндрической головкой
    '11738': '25.94.11.120',  # винты установочные

    '5927':  '25.94.11.130',  # гайки шестигранные
    '5915':  '25.94.11.130',  # гайки шестигранные, класс А
    '5916':  '25.94.11.130',  # гайки шестигранные, класс В
    '10605': '25.94.11.130',  # гайки самоконтрящиеся

    '4028': '25.94.12', # гвозди толевые 
    '4029': '25.94.12', # гвозди строительные
    '12639': '25.94.12', 
    '12641': '25.94.12',
    '12638': '25.94.12', # заклепки вытяжные/потайные

    '11371': '25.94.12.110',  # шайбы плоские
    '6402':  '25.94.12.110',  # шайбы пружинные (гроверы)
    '10450': '25.94.12.110',  # шайбы стопорные
    '11648': '25.94.12.110',  # шайбы увеличенные

    '10299': '25.94.12.120',  # заклепки с полукруглой головкой
    '10300': '25.94.12.120',  # заклепки с потайной головкой
    '10301': '25.94.12.120',  # заклепки с плоской головкой

    '3128':  '25.94.12.190',  # штифты цилиндрические
    '3129':  '25.94.12.190',  # штифты конические

    # СТАЛЬ / ПРОКАТ
    '2284':  '24.32.10.000',  # лента стальная х/к (до 600 мм)
    '5582':  '24.10.42.000',  # листы/полосы коррозионностойкие тонколистовые (чаще х/к)
    '5950':  '24.10.36',      # инструментальные стали (прокат)
    '19903': '24.10.31.000',  # листы горячекатаные, ≥600 мм
    '19904': '24.10.41.000',  # листы холоднокатаные, ≥600 мм
    '14637': '24.10.31.000',  # прокат толстолистовой (углеродистая, ≥600 мм)
    '2590':  '24.10.62.121',  # круг горячекатаный (нелегир.)
    '2591':  '24.10.62.122',  # квадрат горячекатаный (нелегир.)
    '103':   '24.10.62.124',  # полоса стальная (нелегир., горячекатаная)
    '7417':  '24.31.10.110',  # круг калиброванный (холоднотянутый)
    '4986':  '24.32.10.000',  # лента стальная х/к <600 мм (штрипс)

    # припои оловянно-свинцовые
    '21930': '24.43.24',      # чушки припоя — даём базу, форма не уточнена
    '21931': '24.43.24',      # изделия из припоя; конкретизируем по типу ниже

    # фасонный прокат
    '8239':  '24.10.71.120',  # двутавры
    '8240':  '24.10.71.130',  # швеллеры
    '26020': '24.10.71.120',  # двутавры с параллельными гранями
    '8509':  '24.10.71.111',  # уголки равнополочные
    '8510':  '24.10.71.112',  # уголки неравнополочные

    # трубы стальные бесшовные
    '8731':  '24.20.13.110',  # ТУ на горячедеформированные
    '8732':  '24.20.13.110',  # сортамент горячедеформированных
    '8733':  '24.20.13.140',  # ТУ на холоднодеформированные
    '8734':  '24.20.13.140',  # сортамент холоднодеформированных

    # АЛЮМИНИЙ / ЦВЕТМЕТ
    '1535':  '24.44.22.110',  # прутки медные (М1/М2/М3 и др.)
    '17232': '24.42.24.110',  # плиты/листы алюминиевые (>0,2 мм)
    '21631': '24.42.24.110',  # плиты из алюминиевых сплавов
    '21488': '24.42.22.110',  # прутки из алюминия/сплавов
    '13737': '24.42.24.120',  # полосы и ленты алюминиевые (>0,2 мм)
    '13738': '24.42.22.130',  # профили алюминиевые прессованные
    '8617':  '24.42.22.130',  # профили прессованные (устранён дубликат)
    '22233': '24.42.22.130',  # профили из алюминиевых сплавов

    # === МЕДЬ/ЛАТУНЬ (сплавы меди) ===
    '494':   '24.44.24.110',  # листы латунные (в группе «медь» – полуфабрикаты)
    '931':   '24.44.24.120',  # ленты латунные (>0,15 мм)
    '2622':  '24.44.22.110',  # прутки латунные
    '859':   '24.44.13.120',  # латунь в чушках (сплавы медные необработанные)
    '2060':  '24.44.13.120',  # латунь в слитках (сплавы медные необработанные)

    # === ЭЛЕКТРОНИКА ===
    '10317': '26.12.10',      # платы печатные (смонтированные) '26.12.10' — трактуется как товар '26.12.91.120' — трактуется как услуга по изготовлению
    '10434': '27.33.13.120',  # соединители электрические (контактные соединения)

    # ЭЛЕКТРОИЗОЛЯЦИЯ, ТЕКСТИЛЬ, БУМАГА
    '16214': '27.33.14',      # лента ПВХ электроизоляционная
    '13827': '13.95.10.110',  # материалы нетканые (универсально; если нужно — сузим до .111/.112)
    '3441':  '17.12.14.170',  # бумага электроизоляционная (ЭИП-50 и др.)

    # ХИМИЯ
    '4165':  '20.13.41.130',  # медный купорос (сульфаты)
    '11159': '20.13.31.000',  # хлорное железо (галогениды металлов)

    # ДЕРЕВООБРАБОТКА
    '24454': '16.10.10',      # пиломатериалы хвойных пород (сортамент)
    '8486':  '16.10.10',      # пиломатериалы хвойные — требования к качеству (сорт)    
}


# Маппинг DIN -> ОКПД2
DIN2OKPD = {
    '912': '25.94.11.120',   # винты с внутренним шестигранником
    '913': '25.94.11.120',   # винты установочные
    '933': '25.94.11.110',   # болты с шестигранной головкой
    '934': '25.94.11.130',   # гайки шестигранные
    '125': '25.94.12.110',   # шайбы плоские
    '127': '25.94.12.110',   # шайбы пружинные
    '7980': '25.94.12.110',  # шайбы пружинные усиленные
    '7989': '25.94.12.110',  # шайбы пружинные увеличенные (для толстых деталей)
}

# Маппинг ISO -> ОКПД2  
ISO2OKPD = {
    '2010': '25.94.11.120',  # ISO 2010 — винты с полупотайной головкой
    '4014': '25.94.11.110',  # болты с шестигранной головкой
    '4017': '25.94.11.110',  # болты с шестигранной головкой
    '4018': '25.94.11.120',  # винты с шестигранной головкой
    '4032': '25.94.11.130',  # гайки шестигранные
    '7089': '25.94.12.110',  # шайбы плоские
    '7090': '25.94.12.110',  # шайбы плоские увеличенные
}


AL_CTX = r'(?i:\b(?:EN\s*AW|AA|Al(?:uminium|uminum)?|АЛЮМИНИЙ)\s*[-/]?\s*)' # Универсальный «маркер алюминия» (EN/US/ru), + темперы (T/H) опционально
AL_NUMS = r'(1050A|1100|3003|3004|5083|5086|5754|6060|6061|6063|6082|7075)' # Номера, которые допускаем ТОЛЬКО после маркера
CU_CTX = r'(?i:(?:медь|cu))' # Контекст меди

# Марки материалов -> ОКПД2
MATERIAL_GRADES = {
    # ——— ДОПОЛНЕНИЯ К СТАЛЯМ КОНСТРУКЦИОННЫМ/ПРУЖИННЫМ/ПОДШИПНИКОВЫМ ———
    r'\b17Г1С(У)?\b'         : ('24.10.32', 'сталь 17Г1С/17Г1СУ'),
    r'\b10ХСНД\b|\b15ХСНД\b' : ('24.10.32', 'сталь атмосферостойкая 10ХСНД/15ХСНД'),
    r'\b70Г\b'               : ('24.10.32', 'сталь пружинная 70Г'),
    r'\b55С2\b'              : ('24.10.32', 'сталь пружинная 55С2'),
    r'\bШХ15СГ?\b'           : ('24.10.32', 'сталь подшипниковая ШХ15СГ'),
    r'\b100Cr6\b'            : ('24.10.32', 'подшипниковая сталь 100Cr6 (≈ШХ15)'),
    r'\b52100\b'             : ('24.10.32', 'подшипниковая сталь AISI 52100'),
 
    # ——— ЖАРОПРОЧНЫЕ / Ni-СПЛАВЫ (fallback по марке) ———
    r'(?i)\bХН60Ю\b|\bХН65МВ\b|\bХН73МБТЮ\b'   : ('24.45',  'жаропрочный никелевый сплав'),
    r'(?i)\bХН70ВМТЮ\b'                        : ('24.45',  'жаропрочный никелевый сплав ХН70ВМТЮ'),
    r'(?i)\bХН50ВМТЮБ\b'                       : ('24.45',  'жаропрочный никелевый сплав ХН50ВМТЮБ'),
    r'(?i)\bХН77ТЮР\b'                         : ('24.45',  'жаропрочный никелевый сплав ХН77ТЮР'),
    r'(?i)\bХН35ВТЮ\b'                         : ('24.45',  'жаропрочный никелевый сплав ХН35ВТЮ'),
    r'(?i)\bЭИ\d{3}\b'                         : ('24.45',  'жаропрочный сплав серии ЭИ'),
    r'(?i)\bЭП\d{3}\b'                         : ('24.45',  'жаропрочный сплав серии ЭП'),
    r'(?i)\bInconel\s*(625|718|600)\b'         : ('24.45',  'Inconel \\1'),
    r'(?i)\bHastelloy\s*(C-?276|C22)\b'        : ('24.45',  'Hastelloy \\1'),
    r'(?i)\bMonel\s*400\b'                     : ('24.45',  'Monel 400'),
    
    # ——— ТИТАН: популярные добивки ———
    r'\bВТ5-1\b'             : ('24.45.30', 'титановый сплав ВТ5-1'),
    r'\bВТ6\b'               : ('24.45.30', 'титановый сплав ВТ6'),
    r'\bВТ9\b'               : ('24.45.30', 'титановый сплав ВТ9'),
    r'\bВТ14\b'              : ('24.45.30', 'титановый сплав ВТ14'),
    r'\bВТ16\b'              : ('24.45.30', 'титановый сплав ВТ16'),
    r'\bПТ7М\b'              : ('24.45.30', 'титановый сплав ПТ7М'),

    # ——— ЛАТУНИ/БРОНЗЫ: конкретики и EN ———
    r'\bЛС59-1\b'            : ('24.44', 'латунь ЛС59-1'),
    r'\bCW(614N|508L|612N)\b' : ('24.44', 'латунь EN CW\\1'),
    r'\bCuZn(37|39Pb3)\b'    : ('24.44', 'латунь CuZn\\1'),
    r'\bБрО10Ф1\b|\bБрОЦС5-5-5\b|\bБрАЖ9-4\b|\bБрАЖМц10-3-1\.5\b' : ('24.44', 'бронза деформируемая'),

    # ——— СВАРОЧНЫЕ МАРКЕРЫ (для проволоки) ———
    r'\bСв-?08Г2С\b'         : ('24.34.13.120', 'проволока сварочная Св-08Г2С'),
    # ——— СТАЛИ ЛЕГИРОВАННЫЕ / НИЗКОЛЕГИРОВАННЫЕ / ПРУЖИННЫЕ / ПОДШИПНИКОВЫЕ ———
    r'\b09Г2С\b'          : ('24.10.32', 'сталь низколегированная 09Г2С'),
    r'\b09G2S\b'          : ('24.10.32', 'сталь низколегированная 09G2S'),
    r'\b65Г\b'            : ('24.10.32', 'сталь пружинная 65Г'),
    r'\b60С2А\b'          : ('24.10.32', 'сталь пружинная 60С2А'),
    r'\bШХ15\b'           : ('24.10.32', 'сталь подшипниковая ШХ15'),
    r'\b18ХГТ\b'          : ('24.10.32', 'сталь легированная 18ХГТ'),
    r'\b12ХН3А\b'         : ('24.10.32', 'сталь легированная 12ХН3А'),
    r'\b20ХН3А\b'         : ('24.10.32', 'сталь легированная 20ХН3А'),
    r'\b38Х2МЮА\b'        : ('24.10.32', 'сталь легированная 38Х2МЮА'),
    r'\b40ХГ\b'           : ('24.10.32', 'сталь легированная 40ХГ'),
    r'\b(?:сталь\s*)?40Х': ('24.10.32', 'сталь легированная 40Х'),
    r'\b(?:сталь\s*)?45Х': ('24.10.32', 'сталь легированная 45Х'),
    r'\b(?:сталь\s*)?30ХГСА': ('24.10.32', 'сталь легированная 30ХГСА'),
    r'\b(?:сталь\s*)?40ХН': ('24.10.32', 'сталь легированная 40ХН'),
    r'(?i)\b30[ХX]2[НNH]2[ВVB][ФF][МM][АA]\b' : ('24.10.32', 'сталь высоколегированная 30Х2Н2ВФМА'),
    r'\b38ХН3МА\b'           : ('24.10.32', 'сталь легированная 38ХН3МА'),
    r'\b40ХН2МА\b'           : ('24.10.32', 'сталь легированная 40ХН2МА'),
    r'\b40ХНМА\b'            : ('24.10.32', 'сталь легированная 40ХНМА'),

    # ——— ТИТАН (с дефисами и новые индексы) ———
    r'\bВТ1(?:-0)?\b'     : ('24.45.30', 'титан технический ВТ1-0'),
    r'\bВТ3-1\b'          : ('24.45.30', 'титановый сплав ВТ3-1'),
    r'\bВТ22\b'           : ('24.45.30', 'титановый сплав ВТ22'),
    r'\bВТ23\b'           : ('24.45.30', 'титановый сплав ВТ23'),
    r'\bОТ4-1\b'          : ('24.45.30', 'титановый сплав ОТ4-1'),

    # ——— ЛАТУНИ / БРОНЗЫ (дополнения) ———
    r'\bЛС58-2\b'                              : ('24.44',    'латунь свинцовая ЛС58-2'),
    r'\bБрБ[12]\b'                             : ('24.44.21', 'бронза бериллиевая БрБ'),
    r'\bБрКМц[0-9\-]+'                         : ('24.44.21', 'бронза кремнисто-марганцевая'),

    # === СТАЛИ УГЛЕРОДИСТЫЕ ===
    r'\bСт\.?\s*0': ('24.10.61', 'сталь углеродистая Ст0'),
    r'\bСт\.?\s*3(?:сп|пс|кп)?': ('24.10.61', 'сталь углеродистая Ст3'),
    r'\bСт\.?\s*4(?:сп|пс|кп)?': ('24.10.61', 'сталь углеродистая Ст4'),
    r'\bСт\.?\s*5(?:сп|пс|кп)?': ('24.10.61', 'сталь углеродистая Ст5'),
    r'\b(?:сталь\s*)?(?:10|15|20|25|30|35|40|45|50|55|60|65|70)\b': ('24.10.62', 'сталь углеродистая качественная'),

    # === НЕРЖАВЕЮЩИЕ СТАЛИ ===
    r'\b12Х18Н10Т': ('24.10.22', 'сталь коррозионностойкая 12Х18Н10Т'),
    r'\b12Х18Н9Т': ('24.10.22', 'сталь коррозионностойкая 12Х18Н9Т'),
    r'\b08Х18Н10': ('24.10.22', 'сталь коррозионностойкая 08Х18Н10'),
    r'\b08Х18Н10Т': ('24.10.22', 'сталь коррозионностойкая 08Х18Н10Т'),
    r'\b10Х17Н13М2Т': ('24.10.22', 'сталь коррозионностойкая 10Х17Н13М2Т'),
    r'\b07Х16Н6': ('24.10.22', 'сталь коррозионностойкая 07Х16Н6'),
    r'\b20Х13': ('24.10.22', 'сталь коррозионностойкая 20Х13'),
    r'\b30Х13': ('24.10.22', 'сталь коррозионностойкая 30Х13'),
    r'\b40Х13': ('24.10.22', 'сталь коррозионностойкая 40Х13'),
    r'\b95Х18': ('24.10.22', 'сталь коррозионностойкая 95Х18'),
    r'\b07Х12НМБФ': ('24.10.22', 'сталь коррозионностойкая 07Х12НМБФ'),
    r'(?i)\b(12Х18Н10Т|12Х18Н9Т|08Х18Н10Т?|10Х17Н13М2Т|07Х16Н6|20Х13|30Х13|40Х13|95Х18|07Х12НМБФ|12Х17|08Х17|14Х17Н2)\b'
        : ('24.10.22', 'сталь коррозионностойкая \\1'),
    r'(?i)\b(12X18H10T|08X18H10|10X17H13M2T)\b'
        : ('24.10.22', 'сталь коррозионностойкая \\1'),
    
    # ——— НЕРЖАВЕЮЩИЕ: ФЕРРИТ/МАРТЕНСИТ/PH/ДЮПЛЕКС ———
    r'(?i)\bAISI\s*430\b'        : ('24.10.22', 'нерж. сталь AISI 430'),
    r'(?i)\bAISI\s*409\b'        : ('24.10.22', 'нерж. сталь AISI 409'),
    r'(?i)\bAISI\s*410\b'        : ('24.10.22', 'нерж. сталь AISI 410'),
    r'(?i)\bAISI\s*420\b'        : ('24.10.22', 'нерж. сталь AISI 420'),
    r'(?i)\bAISI\s*904L\b'       : ('24.10.22', 'нерж. сталь AISI 904L'),
    r'(?i)\b17[- ]?4\s*PH\b|\bAISI\s*630\b' : ('24.10.22', 'нерж. стареющая 17-4PH (AISI 630)'),
    r'(?i)\b15[- ]?5\s*PH\b'     : ('24.10.22', 'нерж. стареющая 15-5PH'),
    r'(?i)\b1\.(4571|4462|4410)\b': ('24.10.22', 'нержавеющая сталь EN 1.\\1'),
    r'(?i)\bduplex\b|\bsuper\s*duplex\b'    : ('24.10.22', 'нержавеющая Duplex'),
    r'(?i)\bX\dCrNi\d{2}-\d{1,2}\b': ('24.10.22', 'нерж. по EN (X…CrNi…)'),

    # ГОСТ/русские обозначения (коррозионностойкие), тоже как fallback:
    r'(?i)\b12Х18Н10Т\b' : ('24.10.22', 'сталь коррозионностойкая 12Х18Н10Т'),
    r'(?i)\b12Х18Н9Т\b'  : ('24.10.22', 'сталь коррозионностойкая 12Х18Н9Т'),
    r'(?i)\b08Х18Н10\b'  : ('24.10.22', 'сталь коррозионностойкая 08Х18Н10'),
    r'(?i)\b08Х18Н10Т\b' : ('24.10.22', 'сталь коррозионностойкая 08Х18Н10Т'),
    r'(?i)\b10Х17Н13М2Т\b': ('24.10.22', 'сталь коррозионностойкая 10Х17Н13М2Т'),
    r'(?i)\b07Х16Н6\b'   : ('24.10.22', 'сталь коррозионностойкая 07Х16Н6'),
    r'(?i)\b20Х13\b'     : ('24.10.22', 'сталь коррозионностойкая 20Х13'),
    r'(?i)\b30Х13\b'     : ('24.10.22', 'сталь коррозионностойкая 30Х13'),
    r'(?i)\b40Х13\b'     : ('24.10.22', 'сталь коррозионностойкая 40Х13'),
    r'(?i)\b95Х18\b'     : ('24.10.22', 'сталь коррозионностойкая 95Х18'),
    r'(?i)\b07Х12НМБФ\b' : ('24.10.22', 'сталь коррозионностойкая 07Х12НМБФ'),
    r'(?i)\b12Х17\b'     : ('24.10.22', 'сталь коррозионностойкая 12Х17'),
    r'(?i)\b08Х17\b'     : ('24.10.22', 'сталь коррозионностойкая 08Х17'),
    r'(?i)\b14Х17Н2\b'   : ('24.10.22', 'сталь коррозионностойкая 14Х17Н2'),

    # Латиница ГОСТ-марок
    r'(?i)\b12X18H10T\b' : ('24.10.22', '12Х18Н10Т (лат.)'),
    r'(?i)\b08X18H10\b'  : ('24.10.22', '08Х18Н10 (лат.)'),
    r'(?i)\b10X17H13M2T\b': ('24.10.22', '10Х17Н13М2Т (лат.)'),

    # AISI типовые (в т.ч. крепёжные классы A2/A4 как маркеры семейства)
    r'(?i)\bAISI\s*304(L)?\b' : ('24.10.22', 'AISI 304/304L'),
    r'(?i)\bAISI\s*316(L)?\b' : ('24.10.22', 'AISI 316/316L'),
    r'(?i)\bAISI\s*321\b'     : ('24.10.22', 'AISI 321'),
    r'(?i)\bA[24][- ]?\d{2}\b': ('24.10.22', 'класс A2/A4 (≈304/316)'),
    r'(?i)\b1\.(4301|4307|4541|4401|4404|4016)\b' : ('24.10.22', 'нерж. по EN'),

    # === ИНСТРУМЕНТАЛЬНЫЕ СТАЛИ ===
    r'\bУ7А?': ('24.10.36', 'сталь инструментальная У7'),
    r'\bУ8А?': ('24.10.36', 'сталь инструментальная У8'),
    r'\bУ10А?': ('24.10.36', 'сталь инструментальная У10'),
    r'\bУ12А?': ('24.10.36', 'сталь инструментальная У12'),
    r'\bХВГ': ('24.10.36', 'сталь инструментальная ХВГ'),
    r'\bХ12М': ('24.10.36', 'сталь инструментальная Х12М'),
    r'\bХ12МФ': ('24.10.36', 'сталь инструментальная Х12МФ'),
    r'\bХ12Ф1': ('24.10.36', 'сталь инструментальная Х12Ф1'),
    r'\b9ХС': ('24.10.36', 'сталь инструментальная 9ХС'),
    r'\b6ХВ2С': ('24.10.36', 'сталь инструментальная 6ХВ2С'),
    r'\bР6М5': ('24.10.36', 'сталь быстрорежущая Р6М5'),
    r'\bР18': ('24.10.36', 'сталь быстрорежущая Р18'),
 
    # === АЛЮМИНИЕВЫЕ СПЛАВЫ ===
    r'(?i)\bАМц\b'                                 : ('24.42', 'алюминиевый сплав АМц'),
    r'(?i)\b1561[БМ]?\b'                           : ('24.42', 'алюминиевый сплав 1561'),
    r'(?i)\b1163[АТ]?\b'                           : ('24.42', 'алюминиевый сплав 1163'),
    r'(?i)\bВ95(?:пч)?(?:[-\s]?Т[1-3])?\b'         : ('24.42', 'алюминиевый сплав В95'),
    r'(?i)\bД1(?:[АТ])?\b'                         : ('24.42', 'алюминиевый сплав Д1'),
    r'(?i)\bАК[47](?:ч)?(?:-1)?\b'                 : ('24.42', 'алюминиевый сплав АК'),
    r'(?i)\bАД0\b'                                 : ('24.42', 'алюминий технический АД0'),
    r'(?i)\bАД1\b'                                 : ('24.42', 'алюминий технический АД1'),
    r'(?i)\bАД31\b'                                : ('24.42', 'алюминиевый сплав АД31'),
    rf'{AL_CTX}{AL_NUMS}\b(?:[-\s]?(?:T|H)\d\w*)?' : ('24.42', 'алюминиевый сплав (EN/AA/Al)'),
    r'(?i)\bEN\s*AW[- ]?(2024|2017A|1100|3004|5086)(?:[-\s]?[HT]\d\w*)?\b'
                                                    : ('24.42', 'алюминиевый сплав EN AW-\\1'),
    r'(?i)\bАМг[23456]М?\b'                        : ('24.42', 'алюминиевый сплав АМг'),
    r'(?i)\bД16(?:[АТ])?\b'                        : ('24.42', 'алюминиевый сплав Д16'),
    r'(?i)\bАД3[135]\b'                            : ('24.42', 'алюминиевый сплав АД31/АД33/АД35'),

    # === МЕДНЫЕ СПЛАВЫ ===
    r'\bЛатунь': ('24.44', 'латунь'),
    r'\bЛ(?:63|68|70)\b': ('24.44', 'латунь'),
    r'\bЛС59': ('24.44.13', 'латунь ЛС59'),
    r'\bБрАЖ': ('24.44.21', 'бронза алюминиево-железная'),
    r'\bБрОФ': ('24.44.21', 'бронза оловянно-фосфористая'),
    r'\bБрОЦС': ('24.44.21', 'бронза оловянно-цинково-свинцовая'),
    rf'(?i)(?:{CU_CTX}\s*[:\-]?\s*[mм][123]\b|\b[mм][123]\b\s*(?:{CU_CTX})|\bмарка\s*[mм][123]\b)' : ('24.44', 'медь (М1/М2/М3)'),
        
    # === ТИТАНОВЫЕ СПЛАВЫ ===
    r'\bВТ[156]\b': ('24.45.30', 'титановый сплав ВТ'),
    r'\bВТ20': ('24.45.30', 'титановый сплав ВТ20'),
    r'\bОТ4': ('24.45.30', 'титановый сплав ОТ4'),
    r'\bПТ(?:7М|-\d+)?\b': ('24.45.30', 'титановый сплав ПТ'),
}

# Семейства изделий
FAMILY = [

    # === припой ===
    (re.compile(r'\bприпо[йя]\b|\bПОС[КС]?(?:[-\s]?\d{2}(?:-\d{1,2})?)?\b', re.I), '24.43.24'),

    # ⚙️ === КРЕПЁЖ (детализированный) ===
    (re.compile(r'\bболт\w*\s*М\d+', re.I), '25.94.11.110'),
    (re.compile(r'\bвинт\w*\s*М\d+', re.I), '25.94.11.120'),
    (re.compile(r'\bгайк[аи]\w*\s*М\d+', re.I), '25.94.11.130'),
    (re.compile(r'\bшайб[аы]\w*(?:\s*(?:[АМ]?\d+|8[,\.]4|10[,\.]5))?', re.I), '25.94.12.110'),
    (re.compile(r'\bштифт\w*', re.I), '25.94.12.190'),
    (re.compile(r'\bзаклеп\w*', re.I), '25.94.12.120'),
    (re.compile(r'\bшпильк\w*', re.I), '25.94.11.140'),
    (re.compile(r'\bшплинт\w*', re.I), '25.94.12.140'),
    (re.compile(r'\bкольц[ао]\s+стопорн', re.I), '25.94.12.150'),
    
    # === МЕТАЛЛОПРОКАТ (осторожные эвристики; порядок сверху вниз важен) ===

    # — Незамкнутые профили (уголки, двутавры, швеллеры, балки) —
    (re.compile(r'\bуголок\b', re.I),              '24.10.71.110'),  # уголки, нелегир. сталь
    (re.compile(r'\b(двутавр|балк[аи])\b', re.I),  '24.10.71.120'),  # двутавры/балки, нелегир. сталь
    (re.compile(r'\bшвеллер\b', re.I),             '24.10.71.130'),  # швеллеры, нелегир. сталь

    # — Круг / пруток —
    (re.compile(r'\b(круг|пруток)\s*(г/к|горяч\w*)\b', re.I), '24.10.62.121'),   # круг г/к (горячекатаный)
    (re.compile(r'\b(круг|пруток)\s*(к/к|калиброванн\w*|х/т|холоднотян\w*)\b', re.I), '24.31.10.110'),  # прутки/круги калиброванные (х/т)
    # Если встречается просто "круг"/"пруток" без уточнений — лучше не маппить или маппить шире:
    # (re.compile(r'\b(круг|пруток)\b', re.I), '24.10.62')  # включать только если нужен дефолт

    # — Прочий сортовой прокат (нелегир. сталь) —
    (re.compile(r'\bквадрат\b', re.I),        '24.10.62.122'),
    (re.compile(r'\bшестигранник\b', re.I),   '24.10.62.123'),
    (re.compile(r'\bполос[аы]\b', re.I),      '24.10.62.124'),

    # — Листы / плиты —
    (re.compile(r'\bлист\s*(г/к|горяч\w*)\b', re.I), '24.10.31.000'),  # лист горячекатаный ≥600 мм
    (re.compile(r'\bлист\s*(х/к|холод\w*)\b', re.I), '24.10.41.000'),  # лист холоднокатаный ≥600 мм
    (re.compile(r'\bлист\b', re.I),                 '24.10.41.000'),   # осторожный дефолт: х/к
    (re.compile(r'\bплит[аы]\b', re.I),             '24.10.31.000'),   # толстолист (плита) = г/к

    # — Штрипс / лента —
    (re.compile(r'\b(штрипс|лент[аы])\b', re.I), '24.32.10.000'),      # узкий х/к прокат <600 мм, неплакированный

    # — Трубы —
    # (re.compile(r'\bтруб[аы]\s*кругл\w*\b', re.I), '24.20.13'),        # Круглые трубы бывают и бесшовные (24.20.13), и электросварные (24.20.14)
    (re.compile(r'\bтруб[аы]\b.*\bбесшовн\w*\b', re.I), '24.20.13'),   # бесшовные
    (re.compile(r'\bтруб[аы]\b.*\b(бесшовн\w*|горячедеформ\w*|холоднодеформ\w*|ГД\b|ХД\b)\b', re.I), '24.20.13'),
    (re.compile(r'\bтруб[аы]\b.*\b(электросвар\w*|сварн\w*|прямошовн\w*|спирал[ьи][-\s]?шовн\w*|ЭСВ\b|ERW\b)\b', re.I), '24.20.14'),
    (re.compile(r'\bтруб[аы]\b.*\b(электросвар\w*|сварн\w*)\b', re.I), '24.20.14'),   # сварные
    (re.compile(r'\bтруб[аы]\b', re.I), '24.20'),        # любые трубы/пустотелые профили — общий класс

    # — «Профиль» как слово само по себе слишком общее: не маппим без уточнений
    # (re.compile(r'\bпрофил\w*\b', re.I), None)
    (re.compile(r'\b(?:шайб[аи]\s*пружинн\w*|гровер\w*)\b', re.I), '25.94.12.110'),
    
    # 🎨 === ЛАКОКРАСОЧНЫЕ МАТЕРИАЛЫ ===
    (re.compile(r'\bкраск[аи]\w*\s+(?:ПФ|МА|ЭП|ГФ|ХВ|НЦ|АК|УР|КО|ХС|ВЛ)', re.I), '20.30.11'),
    (re.compile(r'\bэмаль\w*\s+(?:ПФ|МЛ|НЦ|ГФ|ЭП)', re.I), '20.30.12'),
    (re.compile(r'\bгрунт(?:овк)?\w*', re.I), '20.30.12.110'),
    (re.compile(r'\bлак\w*', re.I), '20.30.12.120'),
    (re.compile(r'\bшпатл[её]вк\w*', re.I), '20.30.12.130'),
    (re.compile(r'\bрастворител[ья]\w*', re.I), '20.30.22'),
    (re.compile(r'\b(?:ацетон|толуол|ксилол|уайт-спирит|сольвент)\b', re.I), '20.30.22'),
    
    # 🔌 === ЭЛЕКТРОННЫЕ КОМПОНЕНТЫ ===
    (re.compile(r'\bтранзистор\w*', re.I), '26.11.22'),
    (re.compile(r'\bрезистор\w*', re.I), '27.90.60.000'),
    (re.compile(r'\bконденсатор\w*', re.I), '27.90.52'),
    (re.compile(r'\bдиод\w*', re.I), '26.11.21.110'),
    (re.compile(r'\bмикросхем\w*', re.I), '26.11.30'),
    (re.compile(r'\bреле\w*', re.I), '27.12.24'),
    (re.compile(r'\bконтактор\w*', re.I), '27.33.13.140'),
    (re.compile(r'\bпереключател\w*', re.I), '27.33.11.160'),
    (re.compile(r'\bразъ[её]м\w*', re.I), '27.33.13'),
    (re.compile(r'\bсоединител\w*', re.I), '27.33.13'),
    (re.compile(r'\bтрансформатор\w*', re.I), '27.11.4'),
    (re.compile(r'\bдроссел\w*', re.I), '27.33.13.164'),
    (re.compile(r'\bпредохранител\w*', re.I), '27.12.21'),
    
    # === ПРОЧИЕ МАТЕРИАЛЫ ===
    (re.compile(r'\b(?:смазк|солидол|литол|циатим|консталин)\w*', re.I), '20.59.41'),  # смазочные материалы
    (re.compile(r'\bкле[йяе]\w*', re.I),          '20.52'),          # клеи, семейство 20.52 
    (re.compile(r'\bгерметик\w*|герметизатор\w*', re.I), '20.30.22.170'),  # герметики (ЛКМ/мастики) 
    (re.compile(r'\b(фторопласт|капролон)\b(?=.*\b(пруток|стержень|круг)\b)', re.I), '22.21.10.120'),  # прутки/стержни пластмассовые 
    (re.compile(r'\b(фторопласт|капролон)\b(?=.*\b(лист|плита|пластин)\w*\b)', re.I), '22.21.30'),     # листы/плиты полимерные (неарм.)
    (re.compile(r'\b(фторопласт|капролон)\b', re.I), '22.21.30'),  # безопасный дефолт на лист/плиту
    (re.compile(r'\bстеклотекстолит\w*\b', re.I), '23.14.12.190'),  # изделия из стекловолокна прочие (листовой СТЭФ и т.п.)
    (re.compile(r'\b(текстолит|гетинакс)\w*\b', re.I), '23.99.19'), # прочие неметаллич. минеральные изделия (листовой электроизоляц. пластик)
    (re.compile(r'\bвойлок\w*\b', re.I),  '13.99.13.190'),   # фетр и войлок прочие (тех. войлок)
    (re.compile(r'\bпаронит\w*\b', re.I), '23.99.11.130'),   # изделия на основе асбеста/паронит (лист/прокладки)
    (re.compile(r'\bрезин\w+|\bРТИ\b', re.I),          '22.19.73'), # общая корзина изделий из вулканизир. резины н.в.д.г.
    (re.compile(r'\bкольц\w+\s+резин\w+\s+уплотнит\w*', re.I), '22.19.73.111'), # O-rings и т.п.
    (re.compile(r'\bуплотнит\w+.*\bрезин\w*', re.I),   '22.19.73.114'),   # резиновые уплотнители
    (re.compile(r'\bпроволок[аи]\b', re.I), '24.34'),
    (re.compile(r'\bсетк[аи]\b', re.I), '25.93.13'),  # сетки/решётки из проволоки (Fe/Cu)
    (re.compile(r'\bканат\w*', re.I), '25.93.11.120'),
    (re.compile(r'\bтрос\w*', re.I), '25.93.11.120'),
    (re.compile(r'\bэлектрод\w*\s*(?:графит\w*|угольн\w*|углерод\w*)', re.I), '27.90.13.110'), # Графитовые / углеродные электроды (электротехнические)
    (re.compile(r'(?i)(?=.*\b(вольфрам\w*)\b)(?=.*\b(TIG|GTAW)\b)(?=.*\b(стержн\w+|прут\w+)\b)'
            r'(?!.*\b(присадоч\w*|rod\b|ER[0-9A-Z\-]+)\b)'), '24.45.30.110'),
    (re.compile(r'(?:\bприсадоч\w+\b.*\b(?:прут\w+|стержн\w+|rod)\b|\bER[0-9A-Z\-]+\b)', re.I), '25.93.15.110'),
    (re.compile(r'(?i)(?=.*\bэлектрод\w+\b)'
        r'(?=.*\b(вольфрам\w*|TIG|GTAW|WT-?\d{2}|WL-?\d{2}|WP\b|EW(?:Th|La|Ce|Zr)[-\s]?\d(?:\.\d)?)\b)'
        r'(?!.*\b(присадоч\w*|rod\b|ER[0-9A-Z\-]+)\b)'), '24.45.30.110'), # 2) Вольфрамовые неплавящиеся электроды TIG/GTAW → 24.45.30.110
    (re.compile(r'\bпроволок\w*\s*(?:с\s*флюс\w*|флюс\w*|flux(?:\s*core)?\w*)', re.I), '25.93.15.130'), # Проволока с флюсом (FCAW)
    (re.compile(r'(?:\bприсадоч\w+\b.*\b(?:прут\w+|стержн\w+|rod)\b|\bER[0-9A-Z\-]+\b)', re.I), '25.93.15.110'), # Присадочные материалы без покрытия (прутки/стержни/пластины, TIG rod и т.п.)
    (re.compile(r'(?:\bприсадоч\w+\b.*\b(прут\w+|стержн\w+|пластин\w+))|(?:\bTIG\b.*\b(rod|прут\w+|стержн\w+))', re.I), '25.93.15.110'),

    (re.compile(r'\bэлектрод\w+\b.*\b(с\s*покрыти\w*|ММА\b|ручн\w*\s*дугов\w*\s*сварк\w*|SMAW\b)', re.I), '25.93.15.120'), # Электроды с покрытием / ММА / ручная дуговая сварка
    (re.compile(r'\bэлектрод\w+\b.*\bсварк\w+', re.I), '25.93.15.120'), # Общий фолбэк: если «электрод» + «сварк» без другой конкретики — считаем покрытыми

    (re.compile(r'(?:\bспиц\w*\s*вязальн\w*|\bкрючк\w*\s*вязальн\w*|' r'\bигл\w*\s*(?:штопальн\w*|для\s*вышивк\w*)\b)', re.I),'25.93.18.120'), # — Вязание/вышивка/штопка/крючки/спицы → 25.93.18.120
    (re.compile(r'\b(игл\w*|иголк\w*)\b.*\b(швейн\w*|для\s*шитья|машинн\w*|переплет\w*|прошивк\w*)', re.I),'25.93.18.110'),
    (re.compile(r'\bподшипник\w*\s*(?:качени[яй]\s*)?(?:ролик\w*\s*)?игольчат\w*', re.I), '28.15.10.128'), # Подшипники качения роликовые игольчатые
    (re.compile(r'\b(?:игольчат\w*\s*ролик\w*|ролик\w*\s*игольчат\w*)\b', re.I), '28.15.31.120'), # Ролики игольчатые (детали подшипников)
]


def extract_material_info(text: str) -> Dict[str, Any]:
    """Извлечение информации о материале из строки номенклатуры"""
    info = {
        'type': None,        # Плита, Лист, Круг и т.д.
        'size': None,        # Размер/толщина
        'gost': [],          # Список ГОСТов
        'tu': None,          # ТУ
        'ost': None,         # ОСТ
        'din': None,         # DIN
        'iso': None,         # ISO
        'material': None,    # Марка материала
        'material_code': None, # ОКПД2 для материала
        'features': {}       # Дополнительные характеристики
    }
    
    # Тип изделия (расширенный список)
    type_patterns = [
        'Плита', 'Лист', 'Круг', 'Пруток', 'Лента', 'Полоса',
        'Профиль', 'Швеллер', 'Двутавр', 'Уголок', 'Балка',
        'Труба', 'Квадрат', 'Шестигранник',
        'Болт', 'Винт', 'Гайка', 'Шайба', 'Штифт', 'Шпилька',
        'Заготовка', 'Отливка', 'Поковка',
        'Проволока', 'Канат', 'Трос', 'Сетка'
    ]
    
    for pattern in type_patterns:
        if re.match(rf'^{pattern}\b', text, re.I):
            info['type'] = pattern.upper()
            break
    # "Штрипс" — это лента
    if not info['type'] and re.search(r'\bштрипс\w*\b', text, re.I):
        info['type'] = 'ЛЕНТА'

    # Размер (улучшенное извлечение)
    if info['type']:
        # Для крепежа - размер резьбы
        if info['type'] in ['БОЛТ', 'ВИНТ', 'ГАЙКА', 'ШПИЛЬКА']:
            size_match = re.search(r'М(\d+)(?:[xх](\d+))?', text, re.I)
            if size_match:
                info['size'] = f"M{size_match.group(1)}"
                if size_match.group(2):
                    info['features']['length'] = size_match.group(2)
        # Для листов/плит - толщина
        elif info['type'] in ['ПЛИТА', 'ЛИСТ', 'ПОЛОСА', 'ЛЕНТА']:
            # Сначала пробуем "толщина x ширина"
            dim = re.search(r'(\d+(?:[.,]\d+)?)\s*[xх×]\s*(\d+(?:[.,]\d+)?)', text)
            if dim:
                t = dim.group(1).replace(',', '.')
                w = dim.group(2).replace(',', '.')
                info['features']['thickness'] = t
                info['features']['width'] = w
                info['size'] = t  # исторически size — «ведущая» размерность
            else:
                # Иначе хотя бы «толщину»
                size_match = re.search(r'(?:^|\s)(\d+(?:[.,]\d+)?)\b', text)
                if size_match:
                    info['size'] = size_match.group(1).replace(',', '.')
        # Для круглого проката - диаметр
        elif info['type'] in ['КРУГ', 'ПРУТОК', 'ПРОВОЛОКА']:
            size_match = re.search(r'(?:^|\s|Ø|D|d)(\d+(?:[,\.]\d+)?)\b', text)
            if size_match:
                info['size'] = size_match.group(1).replace(',', '.')
        # Для профилей - размеры
        elif info['type'] in ['УГОЛОК', 'ШВЕЛЛЕР', 'ДВУТАВР', 'ПРОФИЛЬ']:
            size_match = re.search(r'(\d+)[xх](\d+)(?:[xх](\d+))?', text)
            if size_match:
                dims = [size_match.group(1), size_match.group(2)]
                if size_match.group(3):
                    dims.append(size_match.group(3))
                info['size'] = 'x'.join(dims)
    
    # Стандарты
    for gm in GOST_RE.finditer(text or ''):
        base = gm.group(2)                 # может быть с точкой, как 11326.37
        num  = base.split('-')[0]          # сохраняем .XX (не режем по '.')
        if num not in info['gost']:
            info['gost'].append(num)
    
    tu_match = re.search(r'ТУ\s*([\d\-\.]+)', text, re.I)
    if tu_match:
        info['tu'] = tu_match.group(1)
    
    ost_match = re.search(r'ОСТ\s*([\d\s\-]+)', text, re.I)
    if ost_match:
        info['ost'] = ost_match.group(1).strip()
    
    din_match = re.search(r'DIN\s*(\d+)', text, re.I)
    if din_match:
        info['din'] = din_match.group(1)
    
    iso_match = re.search(r'ISO\s*(\d+(?:[-\.]\d+)?)', text, re.I)
    if iso_match:
        info['iso'] = iso_match.group(1)
    
    # Материал (улучшенное извлечение)
    # Ищем в последней части после слэша или во всем тексте
    material_part = text.split('/')[-1] if '/' in text else text
    
    # Проверка по известным маркам с приоритетом
    material_found = False
    for pattern, (code, name_tpl) in MATERIAL_GRADES.items():
        m = re.search(pattern, material_part, re.I)
        if m:
            try:
                info['material'] = m.expand(name_tpl)
            except re.error:
                info['material'] = name_tpl   
            info['material_code'] = code
            material_found = True
            break
    
    # Дополнительные признаки материала
    if not material_found:
        # Простые марки стали
        steel_match = re.search(r'\b(Ст\.?\s*\d+\w*)\b', material_part, re.I)
        if steel_match:
            info['material'] = steel_match.group(1)
            info['material_code'] = '24.10.61'
        # Любые другие марки
        else:
            patterns = [
                r'\b([А-Я]{1,3}\d+[А-Я]*(?:-[А-Я]+)?)\b',  # АМг6, ВТ5-1
                r'\b(\d{4}[А-Я]?)\b',  # 1561Б
                r'\b(\d{1,2}[ХX][\dА-Я]+)\b',  # 12Х18Н10Т
            ]
            for pattern in patterns:
                match = re.search(pattern, material_part)
                if match:
                    info['material'] = match.group(1)
                    break
    
    # Дополнительные характеристики
    # Обработка поверхности
    if re.search(r'\b(?:шлифован|полирован|матов)\w*\b', text, re.I):
        info['features']['surface'] = 'обработанная'
    
    # Термообработка
    if re.search(r'\b(?:закален|отожжен|норм(?:ализ)?)\w*\b', text, re.I):
        info['features']['heat_treatment'] = True
    
    # Покрытие
    if re.search(r'\b(?:оцинкован|хромирован|никелирован|кадмирован)\w*\b', text, re.I):
        info['features']['coating'] = True
    
    mW = re.search(r'шир(?:\.|ина)?\s*[:=]?\s*(\d+(?:[.,]\d+)?)\s*(?:мм|mm)\b', text, re.I)
    if mW:
        info['features']['width'] = mW.group(1).replace(',', '.')

    return info

def classify_factory_item(text: str) -> Tuple[str, float, str, Dict]:
    """
    Классификация номенклатуры завода
    Возвращает: (код ОКПД2, уверенность, описание, доп.информация)
    """
    info = extract_material_info(text)

    # --- СТРАХОВКА: игольчатые подшипники до любых "игол"/"игла" ---
    if re.search(r'\bподшипник\w*\b.*\b(NA\d|NK\d|HK\d|RNA\d|NKI\d|NKIS\d)\b', text, re.I):
        return '28.15.10.128', 0.94, 'подшипник игольчатый (серии NA/NK/HK/…)', info

    if re.search(r'\bподшипник\w*\s*(?:качени[яй]\s*)?(?:ролик\w*\s*)?игольчат\w*', text, re.I):
        return '28.15.10.128', 0.96, 'подшипник игольчатый', info

    if re.search(r'\b(?:игольчат\w*\s*ролик\w*|ролик\w*\s*игольчат\w*)\b', text, re.I):
        return '28.15.31.120', 0.95, 'ролики игольчатые (детали подшипников)', info

    # --- трубопроводная арматура (осторожная эвристика) ---
    if (re.search(r'\b(?:вентил\w*|клапан\w*|задвижк\w*|кран\w*)\b', text, re.I)
        and re.search(r'\b(?:DN|Д[Уу]|ДУ)\s*\d+\b|резьб\w+|муфтов\w+|фланцев\w+|трубопровод\w+', text, re.I)):
        # базовый класс по ОКПД2: арматура (вентили/клапаны и т.п.)
        return okpd_canon('28.14.12'), 0.92, 'трубопроводная арматура (вентиль/клапан/задвижка/кран)', info


    # 0) Приоритет: тип + материал вместе дают более точный код
    if info['type'] and info['material']:
        # Определяем семейство материала
        mat = info['material'].upper()
        fam = None
        
        if (info.get('material_code') or '').startswith('24.42') or any(k in mat for k in ['АМГ','АМЦ','АД','АК','Д16','В95','1561','1163','6061','6063','7075']):
            fam = 'AL'
        elif (info.get('material_code') or '').startswith('24.44') or any(k in mat for k in ['ЛАТУН','БРОНЗ','МЕДЬ','М1','М2','М3','Л63','Л68','ЛС59']):
            fam = 'CU'
        elif (info.get('material_code') or '').startswith('24.45') or any(k in mat for k in ['INCONEL','HASTELLOY','MONEL','ХН','ЭИ','ЭП']):
            fam = 'NI'
        elif ('AISI' in mat) or re.search(r'\b1\.\d{4}\b', mat) or re.search(r'\d+[ХX]\d+[НH]\d+', mat):
            fam = 'SS'      # нержавейка
        elif any(s in mat for s in ['ЛЕГИРОВАН', 'ПРУЖИН', 'ПОДШИПНИК', 'ХН', 'ХГСА']):
            fam = 'FEA'     # прочие легированные (кроме нерж.)
        else:
            fam = 'FE'      # нелегированные стали
        
        # Карта тип → код по семействам материалов
        by_fam = {
            'AL': {
                'ПЛИТА':'24.42.24','ЛИСТ':'24.42.24','ПОЛОСА':'24.42.24','ЛЕНТА':'24.42.24',
                'КРУГ':'24.42.22','ПРУТОК':'24.42.22','ПРОФИЛЬ':'24.42.22','УГОЛОК':'24.42.22','ШВЕЛЛЕР':'24.42.22',
                'ТРУБА':'24.42.26','ПРОВОЛОКА':'24.42.23'
            },
            'CU': {
                'ПЛИТА':'24.44.24','ЛИСТ':'24.44.24','ПОЛОСА':'24.44.24','ЛЕНТА':'24.44.24',
                'КРУГ':'24.44.22','ПРУТОК':'24.44.22','ПРОФИЛЬ':'24.44.22',
                'ТРУБА':'24.44.26','ПРОВОЛОКА':'24.44.23'
            },
            'SS': {
                # лист/плита решим ниже по ширине и процессу
                'КРУГ':'24.10.64','ПРУТОК':'24.31.30','ПОЛОСА':'24.10.64',
                'УГОЛОК':'24.10.71','ШВЕЛЛЕР':'24.10.71','ДВУТАВР':'24.10.71',
                'ТРУБА':'24.20'  # детализируется до 24.20.13/14 позже, если появятся признаки
            },
            'NI': {
                'ПЛИТА':'24.45.24','ЛИСТ':'24.45.24','ЛЕНТА':'24.45.24',
                'КРУГ':'24.45.22','ПРУТОК':'24.45.22','ПРОВОЛОКА':'24.45.22','ПРОФИЛЬ':'24.45.22',
                'ТРУБА':'24.45.26'
            },
            'FE': {
                # лист/плита решим ниже по ширине и процессу
                'КРУГ':'24.10.62','ПРУТОК':'24.31.10','КВАДРАТ':'24.10.62','ШЕСТИГРАННИК':'24.10.62','ПОЛОСА':'24.10.62',
                'ПРОФИЛЬ':'24.10.71',
                'УГОЛОК':'24.10.71','ШВЕЛЛЕР':'24.10.71','ДВУТАВР':'24.10.71','БАЛКА':'24.10.71',
                'ТРУБА':'24.20','ПРОВОЛОКА':'24.34'
            }
        }

        
        code = by_fam.get(fam, by_fam['FE']).get(info['type'])
        # Если у материала есть свой ОКПД2 и он специфицичнее (глубже) базового — предпочитаем его.
        mcode = info.get('material_code')
        if mcode:
            mcode = okpd_canon(mcode)
            def depth(c: Optional[str]) -> int:
                return len((c or '').split('.')) if c else 0
            if depth(mcode) > depth(code):
                # пример: Св-08Г2С → 24.34.13.120 (вместо общего 24.34)
                return mcode, 0.95, f"{info['type'].lower()} из {info['material']}", info

        # Если форма не лист/плита/лента — возвращаем код по семейству сразу
        if code and info['type'] not in ('ЛЕНТА', 'ЛИСТ', 'ПЛИТА'):
            fam_name = {
                'AL':'алюминий', 'CU':'медь/латунь', 'SS':'нерж. сталь',
                'FE':'сталь', 'NI':'Ni-сплав', 'FEA':'легир. сталь'
            }.get(fam, 'сталь')
            return okpd_canon(code), 0.90, f"{info['type'].lower()} ({fam_name})", info

        if info['type'] == 'ЛЕНТА':
            feats = info.get('features', {}) or {}
            # ширина
            w = None
            try:
                w = float(str(feats.get('width') or '0').replace(',', '.'))
            except Exception:
                pass

            # подсказки по прокату
            txt = text or ''
            cold_hint = bool(re.search(r'(?i)\b(?:х/к|хк|холоднокатан\w*)\b', txt))
            hot_hint  = bool(re.search(r'(?i)\b(?:г/к|гк|горячекатан\w*)\b', txt))
            gosts = set(info.get('gost') or [])
            if '19904' in gosts:  # лист холоднокатаный ≥600
                cold_hint = True
            if '19903' in gosts:  # лист горячекатаный ≥600
                hot_hint = True

            fam_name = {'AL':'алюминий','CU':'медь/латунь','SS':'нерж. сталь','FE':'сталь','NI':'Ni-сплав'}.get(fam,'сталь')

            # === Цветные металлы: отдельная ветка ===
            if fam in ('AL','CU'):
                if w:
                    if w >= 600:
                        code = '24.42.24.110' if fam == 'AL' else '24.44.24.110'
                        desc = f'лист {fam_name} ≥600 мм'
                        return okpd_canon(code) or code, 0.95, desc, info
                    else:
                        code = '24.42.24.120' if fam == 'AL' else '24.44.24.120'
                        desc = f'полоса/лента {fam_name} <600 мм'
                        return okpd_canon(code), 0.96, desc, info
                # ширина не указана — берём «лента/полоса»
                code = '24.42.24.120' if fam == 'AL' else '24.44.24.120'
                return okpd_canon(code), 0.88, f'лента {fam_name} (толщ. >0,2 мм), ширина не указана', info

            # Ni-сплавы
            if fam == 'NI':
                return okpd_canon('24.45.24'), 0.93, 'лента/лист Ni-сплав (24.45.24)', info


            # === Стали (FE/SS) ===
            if w:
                if w >= 600:
                    # по умолчанию считаем х/к, если нет явной горячекатки
                    if cold_hint or not hot_hint:
                        code = '24.10.42.000' if fam == 'SS' else '24.10.41.000'
                        conf = 0.94 if cold_hint else 0.90
                        return okpd_canon(code), conf, f'лист х/к ≥600 мм ({fam_name})', info
                    else:
                        code = '24.10.33.000' if fam == 'SS' else '24.10.31.000'
                        return okpd_canon(code), 0.94, f'лист г/к ≥600 мм ({fam_name})', info
                else:
                    # узкая стальная лента / штрипс <600 мм
                    is_strip = re.search(r'(?i)\bштрипс\w*\b', txt) is not None
                    code = '24.32.10.000'
                    conf = 0.96 if (cold_hint or '4986' in gosts or is_strip) else 0.90
                    return okpd_canon(code), conf, f'узкая лента/штрипс <600 мм ({fam_name})', info
            # ширина не указана
            return okpd_canon('24.32.10.000'), 0.88, f'лента ({fam_name}), ширина не указана', info
        
        elif info['type'] in ('ЛИСТ', 'ПЛИТА'):
            feats = info.get('features', {}) or {}
            # ширина (если указана)
            w = None
            try:
                w = float(str(feats.get('width') or '0').replace(',', '.'))
            except Exception:
                pass

            txt = text or ''
            cold_hint = bool(re.search(r'(?i)\b(?:х/к|хк|холоднокатан\w*)\b', txt))
            hot_hint  = bool(re.search(r'(?i)\b(?:г/к|гк|горячекатан\w*)\b', txt))
            gosts = set(info.get('gost') or [])
            if '19904' in gosts: cold_hint = True
            if '19903' in gosts: hot_hint  = True

            fam_name = {'AL':'алюминий','CU':'медь/латунь','SS':'нерж. сталь','FE':'сталь','NI':'Ni-сплав'}.get(fam,'сталь')

            # Цветные — уже решены в by_fam (24.42.24/24.44.24/24.45.24), просто вернём базовый код
            if fam in ('AL','CU','NI'):
                base = by_fam[fam][info['type']]
                # при наличии ширины ≥/< 600 можно детализировать .110/.120, но базовый код корректен
                return okpd_canon(base), 0.90, f"{info['type'].lower()} {fam_name}", info

            # Стали
            # По умолчанию «плита» трактуется как ≥600 мм (ваша дефолт-гипотеза)
            is_ge600 = (w is None) or (w >= 600)
            if fam == 'SS':
                code = '24.10.42.000' if (cold_hint or not hot_hint) else '24.10.33.000'
            else:
                code = '24.10.41.000' if (cold_hint or not hot_hint) else '24.10.31.000'
            # если явно указано <600, то это тонколист — но без уверенного процесса лучше не детализировать дальше
            return okpd_canon(code), 0.90 if is_ge600 else 0.75, f"{info['type'].lower()} ({fam_name})", info

            
    lower = text.lower()
    is_solder = ('припой' in lower) or re.search(r'\bПОС[КС]?(?:[-\s]?\d{2}(?:-\d{1,2})?)?\b', text, re.I)

    if is_solder:
        # уточняем по типу изделия (ГОСТ 21931-76)
        if info['type'] == 'ПРОВОЛОКА':
            return '24.43.24.130', 0.94, 'припой, проволока', info
        if info['type'] in ('ПРУТОК', 'КРУГ'):  # пруток припоя часто пишут как «круг Ø…»
            return '24.43.24.110', 0.94, 'припой, пруток', info
        if info['type'] in ('ЛЕНТА', 'ПРОФИЛЬ', 'ПОЛОСА', 'ТРУБА'):
            # в ОКПД2 «профили оловянные» — ближайшее к ленте/трубке припоя
            return '24.43.24.120', 0.92, 'припой, лента/профиль', info
        # форма не распознана — оставляем группу для ручной детализации
        return '24.43.24', 0.88, 'припой (форма не указана)', info


    # 1) Материал определён, но форма (тип изделия) не распознана — не гадаем по коду
    if info.get('material') and not info.get('type'):
        return (
            'UNSURE',
            0.40,
            f"Определён материал: {info['material']}. "
            "Форма не указана — код зависит от формы (лист/пруток/лента/проволока/труба).",
            info
        )
    
    # 2) По стандартам (ГОСТ, DIN, ISO)
    # ГОСТ
    for gost in info['gost']:
        if gost in GOST2OKPD:
            code = GOST2OKPD[gost]
            return okpd_canon(code) or code, 0.93, f"ГОСТ {gost}", info
    
    # DIN
    if info['din'] and info['din'] in DIN2OKPD:
        code = DIN2OKPD[info['din']]
        return okpd_canon(code) or code, 0.92, f"DIN {info['din']}", info
    
    # ISO
    if info['iso']:
        iso_num = info['iso'].split('-')[0].split('.')[0]
        if iso_num in ISO2OKPD:
            code = ISO2OKPD[iso_num]
            return okpd_canon(code) or code, 0.92, f"ISO {info['iso']}", info
    
    type_mapping = {
        # Металлопрокат
        'ПЛИТА':        '24.10.31.000',   # лист г/к ≥600 мм (нелегир.) 
        'ЛИСТ':         '24.10.41.000',   # лист х/к ≥600 мм (нелегир.) — при «г/к» переключать на 24.10.31.000
        'КРУГ':         '24.10.62.121',   # сортовой г/к круг
        'ПРУТОК':       '24.31.10.110',   # пруток холоднотянутый (если «горячекатаный пруток» — это КРУГ 24.10.62.121)
        'КВАДРАТ':      '24.10.62.122',
        'ШЕСТИГРАННИК': '24.10.62.123',
        'ПОЛОСА':       '24.10.62.124',
        'ЛЕНТА':        '24.32.10.000',       # х/к <600 мм (уточнять подвид при возможности)
        'ПРОФИЛЬ':      '24.10.71',       # незамкнутые горячей обработки (уголки/швеллеры/двутавры попадают сюда)
        'УГОЛОК':       '24.10.71',
        'ШВЕЛЛЕР':      '24.10.71',
        'ДВУТАВР':      '24.10.71',
        'БАЛКА':        '24.10.71',
        'ТРУБА':        '24.20',          # семейство труб (б/ш, ЭСВ и пр. — уточнять при наличии данных)

        # Крепёж
        'БОЛТ':         '25.94.11.110',
        'ВИНТ':         '25.94.11.120',
        'ГАЙКА':        '25.94.11.130',
        'ШАЙБА':        '25.94.12.110',
        'ШТИФТ':        '25.94.12.190',
        'ШПИЛЬКА':      '25.94.11.140',

        # Заготовки / литьё / ковка
        'ЗАГОТОВКА':    '24.10.21.190',   # полуфабрикаты прочие (нелегир.)
        'ОТЛИВКА':      '24.10.21.190',   # как стальная литая заготовка (если закупается услуга литья — 24.52.10.000)
        'ПОКОВКА':      '24.10.21.142',   # полуфабрикаты кованые кругл./многоуг. (нелегир.)

        # Прочее
        'ПРОВОЛОКА':    '24.34',
        'КАНАТ':        '25.93.11.120',   # канаты и тросы стальные
        'ТРОС':         '25.93.11.120',
        'СЕТКА':        '25.93.13',
    }

    
    if info['type'] in type_mapping and type_mapping[info['type']]:
        base_code = type_mapping[info['type']]
        return okpd_canon(base_code) or base_code, 0.85, f"{info['type'].lower()}", info
    
    # Специальные случаи
    if 'модельная оснастка' in text.lower():
        if 'дерево' in text.lower():
            return '16.29.14', 0.80, 'модельная оснастка деревянная', info
        else:
            return '25.73.60', 0.80, 'модельная оснастка', info
    
    if 'наконечник' in text.lower():
        if 'латунь' in text.lower():
            return '24.44.13', 0.85, 'наконечник латунный', info
        else:
            return '25.99.29', 0.80, 'наконечник', info
    
    return 'UNSURE', 0.20, 'не удалось классифицировать', info

def guess_okpd2(name: str) -> Tuple[str, float, str]:
    """Упрощенная функция классификации для обратной совместимости"""
    code, conf, desc, _ = classify_factory_item(name)
    return code, conf, desc

# --- Апсерты и извлечение меток ---
def upsert_label(cur, ns: str, code: str, title: Optional[str], path: Optional[List[str]]) -> int:
    """Вставка или обновление метки в БД"""
    cur.execute("""
        INSERT INTO labels(ns, code, title, path)
        VALUES (%s, %s, %s, %s)
        ON CONFLICT (ns, code) DO UPDATE SET
          title = COALESCE(EXCLUDED.title, labels.title),
          path  = COALESCE(EXCLUDED.path,  labels.path)
        RETURNING id
    """, (ns, code, title, path))
    return cur.fetchone()[0]

def attach_label(cur, doc_id: int, ns: str, code: str, conf: Optional[float]=None,
                 title: Optional[str]=None, path: Optional[List[str]]=None):
    """Привязка метки к документу"""
    if ns == 'okpd':
        code = okpd_canon(code) or code
        path = path or okpd_breadcrumb(code)
    lid = upsert_label(cur, ns, code, title, path)
    cur.execute("""
        INSERT INTO docs_labels(doc_id, label_id, conf)
        VALUES (%s, %s, %s)
        ON CONFLICT (doc_id, label_id) DO UPDATE SET
            conf = COALESCE(EXCLUDED.conf, docs_labels.conf)
    """, (doc_id, lid, conf))

def extract_labels_from_text(text: str) -> List[Dict]:
    """Извлечение всех меток из текста"""
    labels: List[Dict] = []
    
    # ГОСТ — все вхождения
    seen_gost = set()
    for m in GOST_RE.finditer(text or ''):
        g = gost_norm(m.group(0))
        if g and g not in seen_gost:
            seen_gost.add(g)
            labels.append({'ns':'gost','code': g,'path': gost_breadcrumb(g),'conf': 0.95})
    
    # ОКПД
    labels.extend(extract_okpd_labels(text))
    
    # ОСТ
    for m in OST_RE.findall(text or ''):
        labels.append({'ns':'ost', 'code': m.strip(), 'path': None, 'conf': 0.7})
    
    # ТУ
    for m in TU_RE.findall(text or ''):
        labels.append({'ns':'tu', 'code': m.strip(), 'path': None, 'conf': 0.7})
    
    # DIN
    for m in DIN_RE.findall(text or ''):
        labels.append({'ns':'din', 'code': m.strip(), 'path': None, 'conf': 0.75})
    
    # ISO
    for m in ISO_RE.findall(text or ''):
        labels.append({'ns':'iso', 'code': m.strip(), 'path': None, 'conf': 0.75})
    
    return labels

# Экспорт основных функций
__all__ = [
    'okpd_canon', 'okpd_norm', 'okpd_breadcrumb', 'okpd_findall',
    'gost_norm', 'gost_breadcrumb',
    'extract_features', 'extract_material_info',
    'extract_okpd_labels', 'extract_labels_from_text',
    'guess_okpd2', 'classify_factory_item',
    'upsert_label', 'attach_label',
    'GOST2OKPD', 'DIN2OKPD', 'ISO2OKPD', 'MATERIAL_GRADES', 'FAMILY'
]